{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction to Infrastructure as Code (IaC)","text":"<p>Infrastructure as Code (IaC) is the practice of managing and provisioning infrastructure through machine-readable configuration files, rather than through manual processes. It enables automation, consistency, and scalability in infrastructure management.</p>"},{"location":"#why-iac","title":"Why IaC?","text":"<p>Traditional infrastructure provisioning involves manually configuring servers, networks, and storage, which is time-consuming, error-prone, and difficult to scale. IaC solves these challenges by treating infrastructure as software code.</p>"},{"location":"#key-benefits-of-iac","title":"Key Benefits of IaC:","text":"<ol> <li>Automation \u2013 Eliminates manual intervention, reducing human errors.</li> <li>Consistency \u2013 Ensures infrastructure is configured the same way across environments.</li> <li>Scalability \u2013 Easily replicate and scale infrastructure as needed.</li> <li>Version Control \u2013 Tracks changes, enabling rollback and auditing.</li> <li>Cost Efficiency \u2013 Reduces operational overhead by automating infrastructure management.</li> </ol>"},{"location":"#types-of-iac-approaches","title":"Types of IaC Approaches:","text":"<ol> <li>Declarative (What to achieve) \u2013 Defines the desired state of the infrastructure, and the tool ensures it matches. Examples: Terraform, Azure Bicep.</li> <li>Imperative (How to achieve it) \u2013 Defines step-by-step instructions to configure infrastructure. Examples: Ansible, scripts (Bash, PowerShell).</li> </ol>"},{"location":"#popular-iac-tools","title":"Popular IaC Tools:","text":"<ul> <li>Terraform \u2013 Open-source, cloud-agnostic IaC tool for provisioning and managing infrastructure.</li> <li>Azure Bicep \u2013 A domain-specific language (DSL) for deploying resources in Azure.</li> <li>AWS CloudFormation \u2013 Manages AWS infrastructure using JSON/YAML templates.</li> </ul>"},{"location":"#introduction-to-azure-bicep","title":"Introduction to Azure Bicep","text":"<p>Azure Bicep is a domain-specific language (DSL) developed by Microsoft for deploying Azure resources declaratively. It is designed as an alternative to JSON-based ARM templates, providing a more readable and maintainable syntax.</p>"},{"location":"#why-use-azure-bicep","title":"Why Use Azure Bicep?","text":"<ol> <li>Simplified Syntax \u2013 More concise and readable than ARM templates.</li> <li>Improved Modularity \u2013 Supports reusable modules for better maintainability.</li> <li>Better Tooling \u2013 Integrated with Visual Studio Code and Azure CLI for enhanced developer experience.</li> <li>Automatic Conversion \u2013 Can decompile existing ARM templates into Bicep code.</li> <li>No JSON Complexity \u2013 Eliminates the need for complex and verbose JSON structures.</li> </ol>"},{"location":"#key-features-of-azure-bicep","title":"Key Features of Azure Bicep","text":"<ul> <li>Declarative and Idempotent \u2013 Defines infrastructure as code, ensuring consistent deployments.</li> <li>Reusable Modules \u2013 Supports modular development for large-scale environments.</li> <li>Native Azure Integration \u2013 Works seamlessly with Azure Resource Manager (ARM) and Azure DevOps.</li> <li>Simplified Parameterization \u2013 Enables flexible and reusable configurations.</li> </ul>"},{"location":"#azure-bicep-vs-arm-templates","title":"Azure Bicep vs. ARM Templates","text":"Feature Azure Bicep ARM Templates Syntax Simple, readable Complex JSON Modularity Supports reusable modules No native modularity Tooling VS Code, Azure CLI Native Azure support Conversion Can decompile ARM to Bicep No direct conversion to Bicep"},{"location":"#which-one-to-choose","title":"Which One to Choose?","text":"<ul> <li>Use Azure Bicep if you want a simplified, modular, and maintainable approach to Azure resource deployment.</li> <li>Use ARM Templates if you need JSON-based definitions for legacy or existing automation processes.</li> </ul>"},{"location":"#1-install-azure-cli","title":"1. Install Azure CLI","text":"<p>Azure CLI is required to deploy Bicep files.</p>"},{"location":"#link-httpslearnmicrosoftcomen-uscliazureinstall-azure-cliinstall","title":"Link : https://learn.microsoft.com/en-us/cli/azure/install-azure-cli#install","text":""},{"location":"#common-structure-of-an-azure-bicep-file","title":"Common Structure of an Azure Bicep File","text":"<p>Over this example, for creating an Azure Storage Account using bicep</p>"},{"location":"#bicep-deployment","title":"Bicep deployment","text":"<p>You can view the JSON template you submitted to Resource Manager by using the bicep build command. In the next example, a Bicep template is converted into its corresponding JSON template</p>"},{"location":"#convert-bicep-to-json","title":"Convert Bicep to JSON","text":"<p>Run the following command: <pre><code>az bicep build --file .\\001\\001_stg.bicep\n</code></pre> Screenshot: The screenshot shows the JSON output generated from the Bicep file, confirming that the conversion process has executed successfully. </p>"},{"location":"toc/","title":"Toc","text":""},{"location":"toc/#table-of-contents","title":"Table of Contents","text":"Section Description Introduction to IaC Overview of Infrastructure as Code (IaC) Why IaC? Reasons to use IaC for infrastructure management Key Benefits of IaC Advantages like automation, consistency, and scalability Types of IaC Approaches Differences between Declarative and Imperative IaC Popular IaC Tools Overview of Terraform, Azure Bicep, and AWS CloudFormation Introduction to Azure Bicep Basics of Azure Bicep and its advantages Azure Bicep vs. ARM Templates Comparison of Bicep and ARM templates Installing Azure CLI Steps to install Azure CLI for Bicep deployment Common Structure of an Azure Bicep File Example of an Azure Storage Account deployment Bicep Deployment Converting Bicep to JSON using Azure CLI"}]}